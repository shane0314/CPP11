
#include <iostream>
#include <stack>
#include <vector>
#include <string.h>
#include <stdlib.h>

using namespace std;

class NblExpr {

	char * expr;

public:
	NblExpr(const char *s)
	{
		expr = new char[strlen(s) + 1];
		strcpy(expr, s);
	}
	~NblExpr()
	{
		delete expr;
	}

	char * getExpr() const { return expr; }
	double calc();//计算表达式结果
	char getOpr(int &i, int &num); //得到一个运算符或数字
	int calcOnce(char opr, stack<double, vector<double>> &numS);
	int getPrior(char opr); //运算符优先级
};

char NblExpr::getOpr(int &i, int &num)
{
	if (expr[i] > '9' || expr[i] < '0')
	{
		i++;
		return expr[i-1]; //运算符
	}
	else
	{
		int m_num = 0; //数字
		while (expr[i] <= '9' && expr[i] >= '0' && i <= strlen(expr))
		{
			m_num = m_num * 10 + expr[i] - '0';
			i++;
		}
		num = m_num;
		return 'N';
	}
}

int NblExpr::calcOnce(char opr, stack<double, vector<double>> &numS)
{
	double num2 = numS.top();
	numS.pop();
	double num1 = numS.top();
	numS.pop();
	double res;
	if (opr == '+')
		res = num1 + num2;
	else if (opr == '-')
		res = num1 - num2;
	else if (opr == '*')
		res = num1 * num2;
	else if (opr == '/' && num2 != 0)
		res = num1 / num2;
	else {
		cout << "运算符错误" << endl;
		return -1;
	}
	numS.push(res);
	return 0;
}

int NblExpr::getPrior(char opr)
{
	if (opr == '+')
		return 1;
	else if (opr == '-')
		return 1;
	else if (opr == '*')
		return 2;
	else if (opr == '/')
		return 2;
	else
	{
		cout << "无效运算符" << endl;
		return 0;
	}
}

double NblExpr::calc()
{
	int num = 0;
	double result = 0;
	char opr, lastOpr;
	stack<double, vector<double>> numStack;
	stack<char, vector<char>> oprStack;

	int len = strlen(expr);
	int i = 0;

	while (i < len)
	{
		if (expr[i] == ' ')
		{
			i++;
			continue;
		}
		opr = getOpr(i, num);
		if (opr == 'N')
			numStack.push(num);
		else if (opr == '(')
			oprStack.push(opr);
		else if (opr == ')')
		{
			while (!oprStack.empty() && oprStack.top() != '(')
			{
				lastOpr = oprStack.top();
				oprStack.pop();
				calcOnce(lastOpr, numStack);
			}
			oprStack.pop(); //弹出'('
		}
		else
		{
			while (!oprStack.empty() && oprStack.top() != '('
				&& getPrior(oprStack.top()) >= getPrior(opr))
			{
				lastOpr = oprStack.top();
				oprStack.pop();
				calcOnce(lastOpr, numStack);
			}
			oprStack.push(opr); //压入当前 运算符
		}
	}//while (i<=len)
	while (!oprStack.empty())
	{
		lastOpr = oprStack.top();
		oprStack.pop();
		calcOnce(lastOpr, numStack);
	}
	if (numStack.empty())
	{
		cout << "计算错误" << endl;
		return 0;
	}
	result = numStack.top();
	return result;
}

int main()
{
	NblExpr exp1("(5 + 6 * (7 + 3) / 3) / 4 + 5");
	cout << exp1.getExpr() << " = " << exp1.calc() << endl;
	NblExpr exp3("1 * ( 7 - (2 + 3 ) )+ 8 / 2");
	cout << exp3.getExpr() << " = " << exp3.calc() << endl;///
	NblExpr exp2("(5 + 6 * (7 + 3) / 3) / 4 + 5 + 1 * ( 7 - (2 + 3 )) + 8 / 2");
	cout << exp2.getExpr() << " = " << exp2.calc() << endl;

	return 0;
}
